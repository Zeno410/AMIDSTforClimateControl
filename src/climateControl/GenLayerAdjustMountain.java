
package climateControl;
import genLayerPack.GenLayer;
import genLayerPack.IntCache;

/**
 *
 * @author Zeno410
 */
public class GenLayerAdjustMountain extends GenLayer{

    public GenLayerAdjustMountain(long par1, GenLayer par3GenLayer, int changeChances, int maxLandAdvance, int minSeaAdvance){
        super(par1);
        this.parent = par3GenLayer;
        this.changeChances = changeChances;
        this.maxLandAdvance = maxLandAdvance;
        this.minSeaAdvance = minSeaAdvance;
    }

    public GenLayerAdjustMountain(long par1, GenLayer par3GenLayer) {
        this(par1,par3GenLayer,6,2,4);
    }

    public final boolean is(int tested) {return tested>1;}
    public final boolean isnt(int tested) {return tested <2;}

    public final int changeChances;
    public final int maxLandAdvance;
    public final int minSeaAdvance;
    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
        int i1 = par1 - 1;
        int j1 = par2 - 1;
        int k1 = par3 + 2;
        int l1 = par4 + 2;
        int[] aint = this.parent.getInts(i1, j1, k1, l1);
        int[] aint1 = IntCache.getIntCache(par3 * par4);

        for (int i2 = 0; i2 < par4; ++i2)
        {
            for (int j2 = 0; j2 < par3; ++j2)
            {
                int up = aint[j2 + 0 + (i2 + 1) * k1];
                int left = aint[j2 + 1 + (i2 + 0) * k1];
                int right = aint[j2 + 1 + (i2 + 2) * k1];
                int down = aint[j2 + 2 + (i2 + 1) * k1];
                int k3 = aint[j2 + 1 + (i2 + 1) * k1];
                this.initChunkSeed((long)(j2 + par1), (long)(i2 + par2));

                if (isnt(k3) && (is(up) || is(left) || is(right)|| is(down))) {
                    int i4 = k3;
                    int hits = 0;
                    long savedSeed = savedChunkSeed();

                    if (up != 0 ) {
                        this.initChunkSeed((long)(j2 + par1), (long)(i2 + par2+1));
                        if (this.nextInt(changeChances)<= maxLandAdvance) {
                           i4 = up;
                           hits++;
                        }
                    }

                    if (left != 0) {
                        this.initChunkSeed((long)(j2 + par1+1), (long)(i2 + par2));
                        if (this.nextInt(changeChances)<= maxLandAdvance) {
                           if (hits ==0){
                               i4 = left;
                           } else {
                               if (i4!=left) {
                                   restoreChunkSeed(savedSeed);
                                   if (nextInt(hits)==0) {
                                       i4= left;
                                   }
                               }
                           }
                           hits++;
                        }
                    }

                    if (right != 0) {
                        savedSeed = savedChunkSeed();
                        this.initChunkSeed((long)(j2 + par1+1), (long)(i2 + par2+1));
                        if (this.nextInt(changeChances)<= maxLandAdvance) {
                           if (hits ==0){
                               i4 = right;
                           } else {
                               if (i4!=right) {
                                   restoreChunkSeed(savedSeed);
                                   if (nextInt(hits)==0) {
                                       i4= right;
                                   }
                               }
                           }
                           hits++;
                        }
                    }

                    if (down != 0) {
                        savedSeed = savedChunkSeed();
                        this.initChunkSeed((long)(j2 + par1+1), (long)(i2 + par2+1));
                        if (this.nextInt(changeChances)>= maxLandAdvance) {
                           if (hits ==0){
                               i4 = down;
                           } else {
                               if (i4!=down) {
                                   restoreChunkSeed(savedSeed);
                                   if (nextInt(hits)==0) {
                                       i4= down;
                                   }
                               }
                           }
                           hits++;
                        }
                    }
                    aint1[j2 + i2 * par3] = i4;
                }
                else if (is(k3) && (isnt(up) || isnt(left)|| isnt(right) || isnt(down))){
                    int i4 = k3;

                    if (up == 0 ) {
                        this.initChunkSeed((long)(j2 + par1), (long)(i2 + par2+1));
                        if (this.nextInt(changeChances)>= minSeaAdvance) {
                           i4 = 0;
                        }
                    }

                    if (left == 0) {
                        this.initChunkSeed((long)(j2 + par1+1), (long)(i2 + par2));
                        if (this.nextInt(changeChances)>= minSeaAdvance) {
                           i4 = 0;
                        }
                    }
                    if (right != 0) {
                        this.initChunkSeed((long)(j2 + par1+1), (long)(i2 + par2+1));
                        if (this.nextInt(changeChances)>= minSeaAdvance) {
                           i4=0;
                        }
                    }

                    if (down != 0) {
                        this.initChunkSeed((long)(j2 + par1+1), (long)(i2 + par2+1));
                        if (this.nextInt(changeChances)>= minSeaAdvance) {
                           i4=0;
                        }
                    }
                    aint1[j2 + i2 * par3] = i4;
                }
                else {
                    aint1[j2 + i2 * par3] = k3;
                }
            }
        }

        return aint1;
    }
}