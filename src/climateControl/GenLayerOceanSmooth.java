
package climateControl;
import genLayerPack.BiomeGenBase;
import genLayerPack.GenLayer;
import genLayerPack.IntCache;

/**
 * The purpose of this class is to smooth coastlines without messing up
 * land differentiation
 * @author Zeno410
 */
public class GenLayerOceanSmooth extends GenLayer
{
    private static final String __OBFID = "CL_00000569";

    public GenLayerOceanSmooth(long par1, GenLayer par3GenLayer)
    {
        super(par1);
        super.parent = par3GenLayer;
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
        int i1 = par1 - 1;
        int j1 = par2 - 1;
        int k1 = par3 + 2;
        int l1 = par4 + 2;
        int[] aint = this.parent.getInts(i1, j1, k1, l1);
        int[] aint1 = IntCache.getIntCache(par3 * par4);

        for (int i2 = 0; i2 < par4; ++i2)
        {
            for (int j2 = 0; j2 < par3; ++j2)
            {
                int k2 = aint[j2 + 0 + (i2 + 1) * k1];
                int l2 = aint[j2 + 2 + (i2 + 1) * k1];
                int i3 = aint[j2 + 1 + (i2 + 0) * k1];
                int j3 = aint[j2 + 1 + (i2 + 2) * k1];
                int k3 = aint[j2 + 1 + (i2 + 1) * k1];

                boolean k2Ocean = (k2 == 0);
                boolean l2Ocean = (k2 == 0);
                boolean i3Ocean = (k2 == 0);
                boolean j3Ocean = (k2 == 0);
                boolean k3Ocean = (k2 == 0);


                if (k2Ocean == l2Ocean && i3Ocean == j3Ocean){
                    this.initChunkSeed((long)(j2 + par1), (long)(i2 + par2));
                    if (this.nextInt(2) == 0) {
                        if (k3Ocean == k2Ocean) {
                            //don't use those, they're the same
                            if (k3Ocean == i3Ocean){
                               // else everything's the same; leave it alone
                            } else {
                                if (this.nextInt(2)== 0){
                                    k3 = i3;
                                } else {
                                    k3 = j3;
                                }
                            }
                        } else {
                            if (this.nextInt(2)== 0){
                                k3 = k2;
                            } else {
                                k3 = l2;
                            }
                        }
                    }
                } else {

                    if (i3Ocean == j3Ocean) {
                        this.initChunkSeed((long)(j2 + par1), (long)(i2 + par2));
                        if (k3Ocean != i3Ocean) {
                            if (this.nextInt(2)== 0){
                                k3 = i3;
                            } else {
                                k3 = j3;
                            }
                        }
                    }

                    if (k2Ocean == l2Ocean) {
                        this.initChunkSeed((long)(j2 + par1), (long)(i2 + par2));
                        if (k3Ocean != k2Ocean) {
                            if (this.nextInt(2)== 0){
                                k3 = k2;
                            } else {
                                k3 = l2;
                            }
                        }
                    }

                }

                aint1[j2 + i2 * par3] = k3;
            }
        }

        return aint1;
    }
}