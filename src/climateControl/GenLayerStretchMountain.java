
package climateControl;
import genLayerPack.GenLayer;
import genLayerPack.IntCache;

/**
 *
 * @author Zeno410
 */
public class GenLayerStretchMountain extends GenLayer {
   public GenLayerStretchMountain(long par1, GenLayer par3GenLayer)
    {
        super(par1);
        this.parent = par3GenLayer;
    }

    public static final boolean is(int tested) {return tested == 0;}
    public static final boolean isnt(int tested) {return tested > 0;}
    public static final boolean isnt(int v1,int v2, int v3, int v4, int v5, int v6, int v7, int v8) {
        return isnt(v1)&&isnt(v2)&&isnt(v3)&&isnt(v4)&&isnt(v5)&&isnt(v6)&&isnt(v7)&&isnt(v8);
    }
    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
        int i1 = par1 - 1;
        int j1 = par2 - 1;
        int k1 = par3 + 2;
        int l1 = par4 + 2;
        int[] aint = this.parent.getInts(i1, j1, k1, l1);
        int[] aint1 = IntCache.getIntCache(par3 * par4);

        for (int i2 = 0; i2 < par4; ++i2)
        {
            for (int j2 = 0; j2 < par3; ++j2)
            {
                int k2 = aint[j2 + 1 + (i2 + 0) * k1];
                int l2 = aint[j2 + 2 + (i2 + 1) * k1];
                int i3 = aint[j2 + 0 + (i2 + 1) * k1];
                int j3 = aint[j2 + 1 + (i2 + 2) * k1];
                int k3 = aint[j2 + 1 + (i2 + 1) * k1];
                int upleft = aint[j2 + 0 + (i2 + 0) * k1];
                int downleft = aint[j2 + 0 + (i2 + 2) * k1];
                int upright = aint[j2 + 2 + (i2 + 0) * k1];
                int downright = aint[j2 + 2 + (i2 + 2) * k1];
                this.initChunkSeed((long)(j2 + par1), (long)(i2 + par2));

                if (is(k3) && (k2 != 0 || l2 != 0 || i3 != 0 || j3 != 0||
                        upleft != 0 || downleft != 0 || downright != 0 || upright != 0))
                {
                    int l3 = 1;
                    int i4 = 1;



                    if (k2 != 0 && this.nextInt(l3++) == 0){
                        i4 = k2;
                    }

                    if (l2 != 0 && this.nextInt(l3++) == 0){
                        i4 = l2;
                    }

                    if (i3 != 0 && this.nextInt(l3++) == 0){
                        i4 = i3;
                    }

                    if (j3 != 0 && this.nextInt(l3++) == 0){
                        i4 = j3;
                    }

                    if (upleft != 0 && this.nextInt(l3++) == 0){
                        i4 = upleft;
                    }

                    if (downleft != 0 && this.nextInt(l3++) == 0){
                        i4 = downleft;
                    }

                    if (upright != 0 && this.nextInt(l3++) == 0){
                        i4 = upright;
                    }

                    if (downright != 0 && this.nextInt(l3++) == 0){
                        i4 = downright;
                    }

                    this.initChunkSeed((long)(j2 + par1), (long)(i2 + par2));
                    if (this.nextInt(l3*3-1) == 0){
                        aint1[j2 + i2 * par3] = i4;
                    } else {
                        aint1[j2 + i2 * par3] = 0;
                    }

                }
                else if (k3 > 0 && (k2 == 0 || l2 == 0 || i3 == 0 || j3 == 0)||
                        upleft == 0 || downleft == 0 || downright == 0 || upright == 0) {
                    int adjacencies = 0;
                    if (k2 != 0)adjacencies++;
                    if (l2 != 0)adjacencies++;
                    if (i3 != 0)adjacencies++;
                    if (j3 != 0)adjacencies++;
                    if (upleft != 0)adjacencies++;
                    if (downleft != 0)adjacencies++;
                    if (downright != 0)adjacencies++;
                    if (upright != 0)adjacencies++;

                    if (adjacencies <2) {
                        aint1[j2 + i2 * par3] = k3;
                    } else if (this.nextInt(3) == 0){
                            aint1[j2 + i2 * par3] = 0;
                        } else {
                            aint1[j2 + i2 * par3] = k3;
                    }
                }
                else {
                    aint1[j2 + i2 * par3] = k3;
                }
            }
        }

        return aint1;


    }
}